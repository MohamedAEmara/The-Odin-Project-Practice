/*  
    Pseudo-classes are keywords that start with a colon. For example,
    :hover is a pseudo-class. 
*/

.first {
    font-size: 120%;
    font-weight: bold;
}   

/* Another way to select the first paragraph */

article p:first-child {
    font-size: 120%;
    font-weight: bold;
}   
    
/* To apply styling to the last child we can do this: */
article p:last-child {
    background-color: antiquewhite;
}

/* 
    All pseudo-classes behave in this same kind of way. 
    They target some bit of your document that is in a certain state, 
    behaving as if you had added a class into your HTML.  
*/

                        /* User Action Pseudo Classes */

/*  
    Some pseudo-classes only apply when the user interacts with the document in some way. 
    These user-action pseudo-classes, sometimes referred to as dynamic pseudo-classes, 
    act as if a class had been added to the element when the user interacts with it. 
    Examples include:
        :hover
        :focus
*/

a:hover {
    color:purple;
}   


/* ======================== Pseudo element ========================= */

/*  
    For example, if you wanted to select the first line of a paragraph you could wrap it in a <span> element 
    and use an element selector; however, that would fail if the number of words you had wrapped were longer 
    or shorter than the parent element's width. As we tend not to know how many words will fit on a line — 
    as that will change if the screen width or font-size changes — it is impossible to robustly do this by adding HTML.
*/

/* When you zoom in the content of the first line decreases, so the styling in turn will also apply only on this line */
article p::first-line {
    background-color: beige;
}   
    
/* Combining pseudo-classes and pseudo-elements */

/*  
    If you wanted to make the first line of the first paragraph bold you could chain the :first-child and ::first-line selectors together. 
    Try editing the previous live example so it uses the following CSS. We are saying that we want to select the first line, of the first <p> element, 
    which is inside an <article> element.
*/

article p:first-child::first-line {
    font-size: 120%;
    font-weight: bold;
}


/* Generating content with ::before  &  ::after */

/* You could use these to insert a string of text */

.box::before {
    content: "This is a text added before the content of the box using CSS. ";
}

.box::after {
    content: " This is a text added after the content of the box using CSS. ";
}


/* :first-child and :last-child will match elements that are the first or last sibling. */

/*  
    Similarly, :empty will match elements that have no children at all, 
    and :only-child will match elements that don’t have any siblings.
*/

/* 
    For a more dynamic approach we can use :nth-child. 
    This is a flexible pseudo-class with a few different uses.
*/



article:nth-child(2) {
    background-color: aqua;
}

/* Just the second child in article will be applied */

/* ==================================  Class Selector  ================================== */
/* 
    to select a class we simply type .className, But we can also access an element with part of its name
    Or any other element attribute:

    [attribute^="value"] - ^= Will match strings from the start.

    [attribute$="value"] - $= Will match strings from the end.

    [attribute*="value"] - *= The wildcard selector will match anywhere inside the string.
*/

[class^='fir'] {
        background-color: black;
    /* Classes are attributes too!
      This will target any class that begins with 'aus':
      class='austria'
      class='australia'
    */
}

/* the powerful of this way of selecting is to select all images for examples with a specific extenstion */
[src$='.jpg'] {
    /* This will target any src attribute that ends in '.jpg':
    src='puppy.jpg'
    src='kitten.jpg'
    */
}

[for*='ill'] {
    /* This will target any for attribute that has 'ill' anywhere inside it:
    for="bill"
    for="jill"
    for="silly"
    for="ill"
    */
}


/* MORE selectors */

/* 
    div:first-of-type   ===> selects only the first div element
    div:nth-last-child(3)    ===> selects the third child from last


    div:nth-of-type(odd)   ===> selects even divs only
    div:nth-of-type(2n+3)  ===> select the odd elements starting from the thrid one
*/

/* ====================================== NOT ===================== */

div:not(.small)     /* select all div element which are not small */ 
{
    /* Styling here */
}


/* ==================================== [attribute] ===================== */
[for] {
    /* To select all elements having for attribute with any value */
}

[for='haha'] {
    /* to select element have for element with value equal to 'haha' */
}