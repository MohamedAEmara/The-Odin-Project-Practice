// 1- Set up Jest in your directory
$ npm install --save-dev jest 


// 2- Create a function in a .js file

    function sum(a, b) {
        return a + b;
    }
    module.exports = sum;


// 3- Create a .test.js file that will contain your actual tests.

    const sum = require('./sum');
    test('adds 1 + 2 to equal 3', () => {
    expect(sum(1, 2)).toBe(3);
    });


// 4- Add the following section to your package.json

    {
        "scripts": {
            "test": "jest"
        }
    }


// 5- Finally, run "$ npm test" and jest will print this message: 

    PASS  ./sum.test.js
    âœ“ adds 1 + 2 to equal 3 (5ms)





// ================================== Matchers =================================== //

in the code expect(2 + 2) returns an "expectation" object.
&           .toBe(4) is the matcher. 

When jest runs, it tracks all the failing matchers so that it can print out nice error msg for you


toBe uses "Object.js" to test exact equality. If you want to check the value of an object, use "toEqual"

test('object assignment', () => {
    const data = {one: 1};
    data['two'] = 2;
    expect(data).toEqual({one: 1, two: 2});
})


// toEqual recursively checks every field of an object or array.



// In tests, you sometimes need to distinguish between "undefined", "null", and "false".
// but you sometimes do not want to treat them differently. 
// Jest contains helpers that let you be explicit about what you want.

    "toBeNull"              ==>         matches only (null) 
    "toBeUndefined"         ==>         matches only (undefined)
    "toBeDefined"           ==>         is the opposite to be (undefined)
    "toBeTruthy"            ==>         matches anything that an if statement treats as (true)
    "toBeFalsy"             ==>         matches anything that an if statement treats as (false)


// Examples:
test('null', () => {
    const n = null;
    expect(n).toBeNull();
    expect(n).toBeDefined();
    expect(n).not.toBeUndefined();
    expect(n).not.toBeTruthy();
    expect(n).toBeFalsy();
});

test('zero', () => {
    const z = 0;
    expect(z).not.toBeNull();
    expect(z).toBeDefined();
    expect(z).not.toBeUndefined();
    expect(z).not.toBeTruthy();
    expect(z).toBeFalsy();
});



// ========================== Number matching =============================== //

test('two plus two', () => {
    const value = 2 + 2;
    expect(value).toBeGreaterThan(3);
    expect(value).toBeGreaterThanOrEqual(3.5);
    expect(value).toBeLessThan(5);
    expect(value).toBeLessThanOrEqual(4.5);

    // toBe and toEqual are equivalent for numbers
    expect(value).toBe(4);
    expect(value).toEqual(4);
})



// ============================= Strings ==================================== //

You can check strings against regular expressions with "toMatch"

test('There is no I in team', () => {
    expect('team').not.toMatch(/I/);
});


test('but there is a (stop) in Christoph', () => {
    expect('Christoph').toMatch(/stop/);
})



// ====================== Arrays & iterables ======================== //
 
You can check if an array or iterable contains particular item using (toContain)

const shoppingList = [
    'diapers',
    'kleenex',
    'trash bags',
    'papper towels',
    'milk',
];


test('the shopping list has milk no it', () => {
    expect(shoppingList).toContain('milk');
    expect(new Set(shoppingList)).toContain('milk');
});



// ================================== Exceptions =================================== //

If you want to test whether a particular function throws an error when it's called,
use "toThrow"

function compileAndrodCode() {
    throw new error('you are using the wrong JDK');
}


test('compiling android goes as expected', () => {
    expect(() => compileAndrodCode()).toThrow();
    expect(() => compileAndrodCode()).toThrow(Error);
})